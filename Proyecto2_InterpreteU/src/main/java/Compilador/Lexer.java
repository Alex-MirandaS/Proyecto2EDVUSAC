// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Documentos/VaquerasUSAC/Proyecto2USAC/Proyecto2_InterpreteU/src/main/jflex/Lexer.jflex

package Compilador;
import java_cup.runtime.Symbol;
import Compilador.ParserSym;
import Objetos.ErrorLSS;
import java.util.ArrayList;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\2\41\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\3\41\1\55\1\56\1\57\1\60"+
    "\1\61\1\0\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\2\41\1\47\1\50\1\51\1\52\1\62\1\54"+
    "\3\41\1\63\1\64\1\65\7\0\1\3\252\0\2\66"+
    "\115\0\1\67\u01a8\0\2\3\u0100\0\1\70\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\16\25\1\26"+
    "\1\27\1\30\1\2\1\31\1\1\1\32\2\1\1\33"+
    "\1\2\1\3\1\34\1\5\2\33\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\16\25\1\26\1\35\1\27"+
    "\1\30\1\2\1\31\1\33\1\32\2\33\1\36\1\37"+
    "\1\0\1\40\1\41\1\0\1\42\1\0\1\43\1\44"+
    "\1\45\6\25\1\46\3\25\1\47\12\25\1\50\1\47"+
    "\3\0\1\36\1\37\1\33\1\40\1\41\2\33\1\43"+
    "\1\44\1\45\6\25\1\46\3\25\1\47\12\25\1\51"+
    "\1\52\1\53\1\54\1\50\1\47\3\33\1\55\2\0"+
    "\1\42\1\56\3\25\1\0\5\25\1\0\1\25\1\57"+
    "\1\60\1\25\1\0\1\61\3\25\1\0\2\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\60\1\0\1\55\2\33"+
    "\1\56\3\25\1\33\5\25\1\33\1\25\1\57\1\60"+
    "\1\25\1\33\1\61\3\25\1\33\2\25\1\33\1\25"+
    "\1\33\1\25\1\33\1\60\1\33\1\0\1\62\1\63"+
    "\1\25\2\64\1\65\3\25\2\66\1\0\2\67\2\25"+
    "\1\0\1\25\1\0\1\70\2\71\1\25\1\0\1\25"+
    "\1\0\1\33\1\62\1\63\1\25\2\64\1\65\3\25"+
    "\2\66\1\33\2\67\2\25\1\33\1\25\1\33\1\70"+
    "\2\71\1\25\1\33\1\25\1\33\2\72\1\25\1\0"+
    "\2\25\1\70\2\25\1\0\1\25\1\0\2\73\1\25"+
    "\1\0\2\72\1\25\1\33\2\25\1\70\2\25\1\33"+
    "\1\25\1\33\2\73\1\25\1\33\1\25\1\0\1\25"+
    "\1\74\1\75\2\76\2\77\1\25\1\0\1\25\1\33"+
    "\1\25\1\74\1\75\2\76\2\77\1\25\1\33\1\25"+
    "\1\0\1\100\1\25\1\0\1\25\1\33\1\100\1\25"+
    "\1\33\2\101\1\25\1\0\2\101\1\25\1\33\4\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\162\0\253\0\162\0\162\0\344"+
    "\0\u011d\0\162\0\162\0\162\0\u0156\0\162\0\u018f\0\162"+
    "\0\u01c8\0\u0201\0\162\0\162\0\u023a\0\u0273\0\u02ac\0\162"+
    "\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\162\0\162"+
    "\0\162\0\u0591\0\162\0\u0603\0\162\0\u063c\0\u0675\0\u06ae"+
    "\0\u06ae\0\u06e7\0\162\0\u06ae\0\u0720\0\u0759\0\u06ae\0\u06ae"+
    "\0\u06ae\0\u0792\0\u06ae\0\u07cb\0\u06ae\0\u0804\0\u083d\0\u06ae"+
    "\0\u06ae\0\u0876\0\u08af\0\u08e8\0\u06ae\0\u0921\0\u095a\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u06ae\0\u0c3f\0\u06ae\0\u06ae\0\u0bcd"+
    "\0\u06ae\0\u0c78\0\u06ae\0\u0cb1\0\u0cea\0\162\0\162\0\u0d23"+
    "\0\162\0\162\0\u0d5c\0\u0d95\0\u0dce\0\162\0\162\0\162"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u02e5\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125"+
    "\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\162\0\162\0\u127b"+
    "\0\u12b4\0\u12ed\0\u06ae\0\u06ae\0\u1326\0\u06ae\0\u06ae\0\u135f"+
    "\0\u1398\0\u06ae\0\u06ae\0\u06ae\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u0921\0\u160b"+
    "\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3"+
    "\0\u180c\0\162\0\162\0\162\0\162\0\u06ae\0\u06ae\0\u1845"+
    "\0\u187e\0\u18b7\0\162\0\u18f0\0\u1929\0\162\0\u0dce\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\u02e5\0\u02e5\0\u1bd5\0\u1c0e\0\u02e5\0\u1c47"+
    "\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f"+
    "\0\u1e48\0\u1e81\0\162\0\u1eba\0\u06ae\0\u1ef3\0\u1f2c\0\u1398"+
    "\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4"+
    "\0\u212d\0\u2166\0\u219f\0\u0921\0\u0921\0\u21d8\0\u2211\0\u0921"+
    "\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9"+
    "\0\u2412\0\u244b\0\u2484\0\u06ae\0\u24bd\0\u24f6\0\162\0\u02e5"+
    "\0\u252f\0\u02e5\0\162\0\u02e5\0\u2568\0\u25a1\0\u25da\0\u02e5"+
    "\0\162\0\u2613\0\u02e5\0\162\0\u264c\0\u2685\0\u26be\0\u26f7"+
    "\0\u2730\0\u02e5\0\u02e5\0\162\0\u2769\0\u27a2\0\u27db\0\u2814"+
    "\0\u284d\0\u06ae\0\u0921\0\u2886\0\u0921\0\u06ae\0\u0921\0\u28bf"+
    "\0\u28f8\0\u2931\0\u0921\0\u06ae\0\u296a\0\u0921\0\u06ae\0\u29a3"+
    "\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u0921\0\u0921\0\u06ae\0\u2ac0"+
    "\0\u2af9\0\u2b32\0\u2b6b\0\u02e5\0\162\0\u2ba4\0\u2bdd\0\u2c16"+
    "\0\u2c4f\0\162\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u02e5"+
    "\0\162\0\u2da5\0\u2dde\0\u0921\0\u06ae\0\u2e17\0\u2e50\0\u2e89"+
    "\0\u2ec2\0\u06ae\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u0921"+
    "\0\u06ae\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u02e5\0\u02e5"+
    "\0\u02e5\0\162\0\u02e5\0\162\0\u3135\0\u316e\0\u31a7\0\u31e0"+
    "\0\u3219\0\u0921\0\u0921\0\u0921\0\u06ae\0\u0921\0\u06ae\0\u3252"+
    "\0\u328b\0\u32c4\0\u32fd\0\u02e5\0\u3336\0\u336f\0\u33a8\0\u33e1"+
    "\0\u0921\0\u341a\0\u3453\0\u02e5\0\162\0\u348c\0\u34c5\0\u0921"+
    "\0\u06ae\0\u34fe\0\u3537\0\u02e5\0\162\0\u0921\0\u06ae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\2\31\1\37\3\31"+
    "\1\40\1\41\1\31\1\42\1\43\1\44\1\31\1\45"+
    "\1\46\1\47\1\3\1\50\1\51\1\3\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\3\1\60\1\61\1\4"+
    "\1\60\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\2\106\1\114\3\106\1\115\1\116"+
    "\1\106\1\117\1\120\1\121\1\106\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\60\1\130\1\131\1\132\1\133"+
    "\1\134\1\135\1\60\116\0\1\136\52\0\1\137\61\0"+
    "\2\140\2\0\65\140\14\0\1\141\72\0\1\142\65\0"+
    "\1\143\4\0\1\144\67\0\1\145\1\0\1\22\74\0"+
    "\1\146\70\0\1\147\70\0\1\150\64\0\1\31\6\0"+
    "\25\31\4\0\2\31\27\0\1\31\6\0\16\31\1\151"+
    "\1\152\5\31\4\0\2\31\27\0\1\31\6\0\1\153"+
    "\6\31\1\154\6\31\1\155\6\31\4\0\2\31\27\0"+
    "\1\31\6\0\4\31\1\156\11\31\1\157\6\31\4\0"+
    "\2\31\27\0\1\31\6\0\13\31\1\160\11\31\4\0"+
    "\2\31\27\0\1\31\6\0\1\161\15\31\1\162\6\31"+
    "\4\0\2\31\27\0\1\31\6\0\5\31\1\163\7\31"+
    "\1\164\7\31\4\0\2\31\27\0\1\31\6\0\1\165"+
    "\24\31\4\0\2\31\27\0\1\31\6\0\4\31\1\166"+
    "\20\31\4\0\2\31\27\0\1\31\6\0\4\31\1\167"+
    "\20\31\4\0\2\31\27\0\1\31\6\0\21\31\1\170"+
    "\2\31\1\171\4\0\2\31\27\0\1\31\6\0\17\31"+
    "\1\172\5\31\4\0\2\31\27\0\1\31\6\0\16\31"+
    "\1\173\6\31\4\0\2\31\27\0\1\31\6\0\7\31"+
    "\1\174\7\31\1\175\5\31\4\0\2\31\72\0\1\176"+
    "\41\0\1\177\7\0\1\200\74\0\1\201\2\0\1\202"+
    "\14\0\2\60\1\0\2\60\1\0\50\60\1\0\14\60"+
    "\1\0\2\60\1\0\17\60\1\203\30\60\1\0\14\60"+
    "\1\0\2\60\1\0\1\60\1\204\46\60\1\0\12\60"+
    "\2\205\1\0\1\60\1\205\1\140\50\205\1\140\12\205"+
    "\2\60\1\0\2\60\1\0\6\60\1\206\41\60\1\0"+
    "\14\60\1\0\2\60\1\0\10\60\1\207\37\60\1\0"+
    "\14\60\1\0\2\60\1\0\5\60\1\210\4\60\1\144"+
    "\35\60\1\0\14\60\1\0\2\60\1\0\11\60\1\211"+
    "\1\60\1\77\34\60\1\0\14\60\1\0\2\60\1\0"+
    "\17\60\1\212\30\60\1\0\14\60\1\0\2\60\1\0"+
    "\17\60\1\213\30\60\1\0\14\60\1\0\2\60\1\0"+
    "\17\60\1\214\30\60\1\0\14\60\1\0\2\60\1\0"+
    "\13\60\1\106\6\60\25\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\13\60\1\106\6\60\16\106"+
    "\1\215\1\216\5\106\1\60\1\0\2\60\2\106\10\60"+
    "\1\0\2\60\1\0\13\60\1\106\6\60\1\217\6\106"+
    "\1\220\6\106\1\221\6\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\13\60\1\106\6\60\4\106"+
    "\1\222\11\106\1\223\6\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\13\60\1\106\6\60\13\106"+
    "\1\224\11\106\1\60\1\0\2\60\2\106\10\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\1\225\15\106\1\226"+
    "\6\106\1\60\1\0\2\60\2\106\10\60\1\0\2\60"+
    "\1\0\13\60\1\106\6\60\5\106\1\227\7\106\1\230"+
    "\7\106\1\60\1\0\2\60\2\106\10\60\1\0\2\60"+
    "\1\0\13\60\1\106\6\60\1\231\24\106\1\60\1\0"+
    "\2\60\2\106\10\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\4\106\1\232\20\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\13\60\1\106\6\60\4\106"+
    "\1\233\20\106\1\60\1\0\2\60\2\106\10\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\21\106\1\234\2\106"+
    "\1\235\1\60\1\0\2\60\2\106\10\60\1\0\2\60"+
    "\1\0\13\60\1\106\6\60\17\106\1\236\5\106\1\60"+
    "\1\0\2\60\2\106\10\60\1\0\2\60\1\0\13\60"+
    "\1\106\6\60\16\106\1\237\6\106\1\60\1\0\2\60"+
    "\2\106\10\60\1\0\2\60\1\0\13\60\1\106\6\60"+
    "\7\106\1\240\7\106\1\241\5\106\1\60\1\0\2\60"+
    "\2\106\6\60\5\0\1\242\37\0\1\243\1\0\1\244"+
    "\1\0\1\245\17\0\2\60\1\0\2\60\1\0\50\60"+
    "\1\0\5\60\1\246\6\60\1\0\2\60\1\0\27\60"+
    "\1\247\7\60\1\250\10\60\1\0\14\60\1\0\2\60"+
    "\1\0\43\60\1\251\2\60\1\252\1\60\1\0\12\60"+
    "\10\0\1\253\60\0\13\254\1\255\55\254\2\144\1\256"+
    "\66\144\21\0\1\257\70\0\1\31\6\0\16\31\1\260"+
    "\6\31\4\0\2\31\27\0\1\31\6\0\4\31\1\261"+
    "\20\31\4\0\2\31\27\0\1\31\6\0\20\31\1\262"+
    "\4\31\4\0\2\31\4\0\1\263\22\0\1\31\6\0"+
    "\1\264\24\31\4\0\2\31\27\0\1\31\6\0\15\31"+
    "\1\265\7\31\4\0\2\31\27\0\1\31\6\0\5\31"+
    "\1\266\17\31\4\0\2\31\27\0\1\31\6\0\22\31"+
    "\1\267\2\31\4\0\2\31\27\0\1\31\6\0\20\31"+
    "\1\270\4\31\4\0\2\31\4\0\1\271\22\0\1\31"+
    "\6\0\13\31\1\272\11\31\4\0\2\31\27\0\1\31"+
    "\6\0\17\31\1\273\5\31\4\0\2\31\27\0\1\31"+
    "\6\0\21\31\1\274\3\31\4\0\2\31\27\0\1\31"+
    "\6\0\10\31\1\275\14\31\4\0\2\31\3\0\1\276"+
    "\23\0\1\31\6\0\24\31\1\277\4\0\2\31\27\0"+
    "\1\31\6\0\21\31\1\300\3\31\4\0\2\31\27\0"+
    "\1\31\6\0\17\31\1\301\5\31\4\0\2\31\27\0"+
    "\1\31\6\0\10\31\1\302\14\31\4\0\2\31\3\0"+
    "\1\303\23\0\1\31\6\0\22\31\1\304\2\31\4\0"+
    "\2\31\27\0\1\31\6\0\10\31\1\305\14\31\4\0"+
    "\2\31\3\0\1\306\23\0\1\31\6\0\10\31\1\307"+
    "\14\31\4\0\2\31\3\0\1\310\23\0\1\31\6\0"+
    "\10\31\1\311\14\31\4\0\2\31\3\0\1\312\53\0"+
    "\1\313\66\0\1\314\61\0\1\303\25\0\1\303\2\0"+
    "\2\60\1\0\2\60\1\0\2\60\1\315\45\60\1\0"+
    "\12\60\2\316\1\254\2\316\1\254\5\316\1\317\42\316"+
    "\1\254\12\316\2\60\1\0\2\60\1\0\13\60\1\320"+
    "\34\60\1\0\14\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\16\106\1\321\6\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\13\60\1\106\6\60\4\106"+
    "\1\322\20\106\1\60\1\0\2\60\2\106\10\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\20\106\1\323\4\106"+
    "\1\60\1\0\2\60\2\106\4\60\1\324\3\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\1\325\24\106\1\60"+
    "\1\0\2\60\2\106\10\60\1\0\2\60\1\0\13\60"+
    "\1\106\6\60\15\106\1\326\7\106\1\60\1\0\2\60"+
    "\2\106\10\60\1\0\2\60\1\0\13\60\1\106\6\60"+
    "\5\106\1\327\17\106\1\60\1\0\2\60\2\106\10\60"+
    "\1\0\2\60\1\0\13\60\1\106\6\60\22\106\1\330"+
    "\2\106\1\60\1\0\2\60\2\106\10\60\1\0\2\60"+
    "\1\0\13\60\1\106\6\60\20\106\1\331\4\106\1\60"+
    "\1\0\2\60\2\106\4\60\1\332\3\60\1\0\2\60"+
    "\1\0\13\60\1\106\6\60\13\106\1\333\11\106\1\60"+
    "\1\0\2\60\2\106\10\60\1\0\2\60\1\0\13\60"+
    "\1\106\6\60\17\106\1\334\5\106\1\60\1\0\2\60"+
    "\2\106\10\60\1\0\2\60\1\0\13\60\1\106\6\60"+
    "\21\106\1\335\3\106\1\60\1\0\2\60\2\106\10\60"+
    "\1\0\2\60\1\0\13\60\1\106\6\60\10\106\1\336"+
    "\14\106\1\60\1\0\2\60\2\106\3\60\1\337\4\60"+
    "\1\0\2\60\1\0\13\60\1\106\6\60\24\106\1\340"+
    "\1\60\1\0\2\60\2\106\10\60\1\0\2\60\1\0"+
    "\13\60\1\106\6\60\21\106\1\341\3\106\1\60\1\0"+
    "\2\60\2\106\10\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\17\106\1\342\5\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\13\60\1\106\6\60\10\106"+
    "\1\343\14\106\1\60\1\0\2\60\2\106\3\60\1\344"+
    "\4\60\1\0\2\60\1\0\13\60\1\106\6\60\22\106"+
    "\1\345\2\106\1\60\1\0\2\60\2\106\10\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\10\106\1\346\14\106"+
    "\1\60\1\0\2\60\2\106\3\60\1\347\4\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\10\106\1\350\14\106"+
    "\1\60\1\0\2\60\2\106\3\60\1\351\4\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\10\106\1\352\14\106"+
    "\1\60\1\0\2\60\2\106\3\60\1\353\4\60\1\0"+
    "\2\60\1\0\43\60\1\354\4\60\1\0\14\60\1\0"+
    "\2\60\1\0\41\60\1\355\6\60\1\0\14\60\1\0"+
    "\2\60\1\0\32\60\1\344\15\60\1\0\7\60\1\344"+
    "\2\60\13\254\1\356\55\254\13\0\1\255\4\0\1\357"+
    "\71\0\1\31\6\0\13\31\1\360\11\31\4\0\2\31"+
    "\27\0\1\31\6\0\1\361\24\31\4\0\2\31\27\0"+
    "\1\31\6\0\4\31\1\362\20\31\4\0\2\31\42\0"+
    "\1\363\55\0\1\31\6\0\17\31\1\364\5\31\4\0"+
    "\2\31\27\0\1\31\6\0\21\31\1\365\3\31\4\0"+
    "\2\31\27\0\1\31\6\0\1\366\24\31\4\0\2\31"+
    "\27\0\1\31\6\0\1\31\1\367\23\31\4\0\2\31"+
    "\27\0\1\31\6\0\4\31\1\370\20\31\4\0\2\31"+
    "\42\0\1\371\55\0\1\31\6\0\20\31\1\304\4\31"+
    "\4\0\2\31\4\0\1\372\22\0\1\31\6\0\15\31"+
    "\1\373\7\31\4\0\2\31\53\0\1\374\44\0\1\31"+
    "\6\0\22\31\1\375\2\31\4\0\2\31\27\0\1\31"+
    "\6\0\10\31\1\376\14\31\4\0\2\31\3\0\1\377"+
    "\23\0\1\31\6\0\21\31\1\u0100\3\31\4\0\2\31"+
    "\57\0\1\u0101\40\0\1\31\6\0\4\31\1\u0102\20\31"+
    "\4\0\2\31\27\0\1\31\6\0\3\31\1\u0103\21\31"+
    "\4\0\2\31\41\0\1\u0104\56\0\1\31\6\0\13\31"+
    "\1\u0105\11\31\4\0\2\31\51\0\1\u0106\46\0\1\31"+
    "\6\0\21\31\1\u0107\3\31\4\0\2\31\57\0\1\u0108"+
    "\57\0\1\377\25\0\1\377\2\0\2\316\1\254\2\316"+
    "\1\254\5\316\1\u0109\42\316\1\254\12\316\2\60\1\0"+
    "\2\60\1\0\5\60\1\317\4\60\1\u010a\35\60\1\0"+
    "\14\60\1\0\2\60\1\0\13\60\1\106\6\60\13\106"+
    "\1\u010b\11\106\1\60\1\0\2\60\2\106\10\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\1\u010c\24\106\1\60"+
    "\1\0\2\60\2\106\10\60\1\0\2\60\1\0\13\60"+
    "\1\106\6\60\4\106\1\u010d\20\106\1\60\1\0\2\60"+
    "\2\106\10\60\1\0\2\60\1\0\26\60\1\u010e\21\60"+
    "\1\0\14\60\1\0\2\60\1\0\13\60\1\106\6\60"+
    "\17\106\1\u010f\5\106\1\60\1\0\2\60\2\106\10\60"+
    "\1\0\2\60\1\0\13\60\1\106\6\60\21\106\1\u0110"+
    "\3\106\1\60\1\0\2\60\2\106\10\60\1\0\2\60"+
    "\1\0\13\60\1\106\6\60\1\u0111\24\106\1\60\1\0"+
    "\2\60\2\106\10\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\1\106\1\u0112\23\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\13\60\1\106\6\60\4\106"+
    "\1\u0113\20\106\1\60\1\0\2\60\2\106\10\60\1\0"+
    "\2\60\1\0\26\60\1\u0114\21\60\1\0\14\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\20\106\1\345\4\106"+
    "\1\60\1\0\2\60\2\106\4\60\1\u0115\3\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\15\106\1\u0116\7\106"+
    "\1\60\1\0\2\60\2\106\10\60\1\0\2\60\1\0"+
    "\37\60\1\u0117\10\60\1\0\14\60\1\0\2\60\1\0"+
    "\13\60\1\106\6\60\22\106\1\u0118\2\106\1\60\1\0"+
    "\2\60\2\106\10\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\10\106\1\u0119\14\106\1\60\1\0\2\60\2\106"+
    "\3\60\1\u011a\4\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\21\106\1\u011b\3\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\43\60\1\u011c\4\60\1\0"+
    "\14\60\1\0\2\60\1\0\13\60\1\106\6\60\4\106"+
    "\1\u011d\20\106\1\60\1\0\2\60\2\106\10\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\3\106\1\u011e\21\106"+
    "\1\60\1\0\2\60\2\106\10\60\1\0\2\60\1\0"+
    "\25\60\1\u011f\22\60\1\0\14\60\1\0\2\60\1\0"+
    "\13\60\1\106\6\60\13\106\1\u0120\11\106\1\60\1\0"+
    "\2\60\2\106\10\60\1\0\2\60\1\0\35\60\1\u0121"+
    "\12\60\1\0\14\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\21\106\1\u0122\3\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\43\60\1\u0123\4\60\1\0"+
    "\14\60\1\0\2\60\1\0\32\60\1\u011a\15\60\1\0"+
    "\7\60\1\u011a\2\60\13\254\1\356\4\254\1\357\50\254"+
    "\21\0\1\31\6\0\12\31\1\u0124\12\31\4\0\2\31"+
    "\5\0\1\u0125\21\0\1\31\6\0\10\31\1\u0126\14\31"+
    "\4\0\2\31\3\0\1\u0127\23\0\1\31\6\0\22\31"+
    "\1\u0128\2\31\4\0\2\31\27\0\1\31\6\0\13\31"+
    "\1\u0129\11\31\4\0\2\31\42\0\1\u012a\55\0\1\31"+
    "\6\0\17\31\1\u012b\5\31\4\0\2\31\27\0\1\31"+
    "\6\0\15\31\1\u012c\7\31\4\0\2\31\53\0\1\u012d"+
    "\44\0\1\31\6\0\2\31\1\u012e\22\31\4\0\2\31"+
    "\40\0\1\u012f\57\0\1\31\6\0\4\31\1\u0130\20\31"+
    "\4\0\2\31\42\0\1\u0131\55\0\1\31\6\0\4\31"+
    "\1\u0132\20\31\4\0\2\31\42\0\1\u0133\34\0\2\316"+
    "\1\254\2\316\1\254\5\316\1\u0109\4\316\1\u010a\35\316"+
    "\1\254\12\316\2\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\12\106\1\u0134\12\106\1\60\1\0\2\60\2\106"+
    "\5\60\1\u0135\2\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\10\106\1\u0136\14\106\1\60\1\0\2\60\2\106"+
    "\3\60\1\u0137\4\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\22\106\1\u0138\2\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\13\60\1\106\6\60\13\106"+
    "\1\u0139\11\106\1\60\1\0\2\60\2\106\10\60\1\0"+
    "\2\60\1\0\26\60\1\u013a\21\60\1\0\14\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\17\106\1\u013b\5\106"+
    "\1\60\1\0\2\60\2\106\10\60\1\0\2\60\1\0"+
    "\13\60\1\106\6\60\15\106\1\u013c\7\106\1\60\1\0"+
    "\2\60\2\106\10\60\1\0\2\60\1\0\37\60\1\u013d"+
    "\10\60\1\0\14\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\2\106\1\u013e\22\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\24\60\1\u013f\23\60\1\0"+
    "\14\60\1\0\2\60\1\0\13\60\1\106\6\60\4\106"+
    "\1\u0140\20\106\1\60\1\0\2\60\2\106\10\60\1\0"+
    "\2\60\1\0\26\60\1\u0141\21\60\1\0\14\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\4\106\1\u0142\20\106"+
    "\1\60\1\0\2\60\2\106\10\60\1\0\2\60\1\0"+
    "\26\60\1\u0143\21\60\1\0\12\60\21\0\1\31\6\0"+
    "\15\31\1\u0144\7\31\4\0\2\31\53\0\1\u0145\44\0"+
    "\1\31\6\0\13\31\1\u0146\11\31\4\0\2\31\27\0"+
    "\1\31\6\0\4\31\1\u0147\20\31\4\0\2\31\27\0"+
    "\1\31\6\0\15\31\1\u0148\7\31\4\0\2\31\27\0"+
    "\1\31\6\0\6\31\1\u0149\16\31\4\0\2\31\44\0"+
    "\1\u014a\53\0\1\31\6\0\7\31\1\u014b\15\31\4\0"+
    "\2\31\45\0\1\u014c\52\0\1\31\6\0\13\31\1\u014d"+
    "\11\31\4\0\2\31\51\0\1\u014e\25\0\2\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\15\106\1\u014f\7\106"+
    "\1\60\1\0\2\60\2\106\10\60\1\0\2\60\1\0"+
    "\37\60\1\u0150\10\60\1\0\14\60\1\0\2\60\1\0"+
    "\13\60\1\106\6\60\13\106\1\u0151\11\106\1\60\1\0"+
    "\2\60\2\106\10\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\4\106\1\u0152\20\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\13\60\1\106\6\60\15\106"+
    "\1\u0153\7\106\1\60\1\0\2\60\2\106\10\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\6\106\1\u0154\16\106"+
    "\1\60\1\0\2\60\2\106\10\60\1\0\2\60\1\0"+
    "\30\60\1\u0155\17\60\1\0\14\60\1\0\2\60\1\0"+
    "\13\60\1\106\6\60\7\106\1\u0156\15\106\1\60\1\0"+
    "\2\60\2\106\10\60\1\0\2\60\1\0\31\60\1\u0157"+
    "\16\60\1\0\14\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\13\106\1\u0158\11\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\35\60\1\u0159\12\60\1\0"+
    "\12\60\21\0\1\31\6\0\22\31\1\u015a\2\31\4\0"+
    "\2\31\60\0\1\u015b\37\0\1\31\6\0\21\31\1\u015c"+
    "\3\31\4\0\2\31\27\0\1\31\6\0\10\31\1\u015d"+
    "\14\31\4\0\2\31\3\0\1\u015e\42\0\1\u015e\25\0"+
    "\1\u015e\2\0\2\60\1\0\2\60\1\0\13\60\1\106"+
    "\6\60\22\106\1\u015f\2\106\1\60\1\0\2\60\2\106"+
    "\10\60\1\0\2\60\1\0\44\60\1\u0160\3\60\1\0"+
    "\14\60\1\0\2\60\1\0\13\60\1\106\6\60\21\106"+
    "\1\u0161\3\106\1\60\1\0\2\60\2\106\10\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\10\106\1\u0162\14\106"+
    "\1\60\1\0\2\60\2\106\3\60\1\u0163\4\60\1\0"+
    "\2\60\1\0\32\60\1\u0163\15\60\1\0\7\60\1\u0163"+
    "\2\60\21\0\1\31\6\0\4\31\1\u0164\20\31\4\0"+
    "\2\31\42\0\1\u0165\55\0\1\31\6\0\15\31\1\u0166"+
    "\7\31\4\0\2\31\53\0\1\u0167\23\0\2\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\4\106\1\u0168\20\106"+
    "\1\60\1\0\2\60\2\106\10\60\1\0\2\60\1\0"+
    "\26\60\1\u0169\21\60\1\0\14\60\1\0\2\60\1\0"+
    "\13\60\1\106\6\60\15\106\1\u016a\7\106\1\60\1\0"+
    "\2\60\2\106\10\60\1\0\2\60\1\0\37\60\1\u016b"+
    "\10\60\1\0\12\60\21\0\1\31\6\0\4\31\1\u016c"+
    "\20\31\4\0\2\31\42\0\1\u016d\34\0\2\60\1\0"+
    "\2\60\1\0\13\60\1\106\6\60\4\106\1\u016e\20\106"+
    "\1\60\1\0\2\60\2\106\10\60\1\0\2\60\1\0"+
    "\26\60\1\u016f\21\60\1\0\12\60";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\2\11\2\1\3\11\1\1\1\11"+
    "\1\1\1\11\2\1\2\11\3\1\1\11\16\1\3\11"+
    "\1\1\1\11\1\1\1\11\5\1\1\11\52\1\2\11"+
    "\1\0\2\11\1\0\1\1\1\0\3\11\25\1\2\11"+
    "\3\0\37\1\4\11\5\1\1\11\2\0\1\11\4\1"+
    "\1\0\5\1\1\0\4\1\1\0\4\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\11\1\0\41\1"+
    "\1\0\1\11\3\1\1\11\5\1\1\11\1\0\1\1"+
    "\1\11\2\1\1\0\1\1\1\0\2\1\1\11\1\1"+
    "\1\0\1\1\1\0\34\1\1\11\1\1\1\0\2\1"+
    "\1\11\2\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\21\1\1\0\4\1\1\11\1\1\1\11\1\1"+
    "\1\0\14\1\1\0\2\1\1\0\6\1\1\11\1\1"+
    "\1\0\5\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private ArrayList <ErrorLSS> errores = new ArrayList();
//CUP
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type){
        return new Symbol(type, yyline+1, yycolumn+1);
    }

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    public ArrayList<ErrorLSS> getErrores(){
        return errores;
    }
    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
  
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 
    return symbol(ParserSym.EOF);

 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { errores.add(new ErrorLSS(yyline,yycolumn,"Lexico","El Simbolo: "+yytext()+" es inválido"));
            }
            // fall through
          case 67: break;
          case 2:
            { /*ignore*/
            }
            // fall through
          case 68: break;
          case 3:
            { return  symbol(ParserSym.NOT, yytext());
            }
            // fall through
          case 69: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 70: break;
          case 5:
            { return  symbol(ParserSym.MOD, yytext());
            }
            // fall through
          case 71: break;
          case 6:
            { return  symbol(ParserSym.PARAB, yytext());
            }
            // fall through
          case 72: break;
          case 7:
            { return  symbol(ParserSym.PARCER, yytext());
            }
            // fall through
          case 73: break;
          case 8:
            { return  symbol(ParserSym.MULT, yytext());
            }
            // fall through
          case 74: break;
          case 9:
            { return  symbol(ParserSym.MAS, yytext());
            }
            // fall through
          case 75: break;
          case 10:
            { return  symbol(ParserSym.COMA, yytext());
            }
            // fall through
          case 76: break;
          case 11:
            { return  symbol(ParserSym.MEN, yytext());
            }
            // fall through
          case 77: break;
          case 12:
            { return  symbol(ParserSym.PUNTO, yytext());
            }
            // fall through
          case 78: break;
          case 13:
            { return  symbol(ParserSym.DIV, yytext());
            }
            // fall through
          case 79: break;
          case 14:
            { return  symbol(ParserSym.ENTD, yytext());
            }
            // fall through
          case 80: break;
          case 15:
            { return  symbol(ParserSym.DOSPUNTOS, yytext());
            }
            // fall through
          case 81: break;
          case 16:
            { return  symbol(ParserSym.PYCOMA, yytext());
            }
            // fall through
          case 82: break;
          case 17:
            { return  symbol(ParserSym.MENORQ, yytext());
            }
            // fall through
          case 83: break;
          case 18:
            { return  symbol(ParserSym.ASIG, yytext());
            }
            // fall through
          case 84: break;
          case 19:
            { return  symbol(ParserSym.MAYORQ, yytext());
            }
            // fall through
          case 85: break;
          case 20:
            { return  symbol(ParserSym.TER, yytext());
            }
            // fall through
          case 86: break;
          case 21:
            { return  symbol(ParserSym.ID, yytext());
            }
            // fall through
          case 87: break;
          case 22:
            { return  symbol(ParserSym.CORAB, yytext());
            }
            // fall through
          case 88: break;
          case 23:
            { return  symbol(ParserSym.CORCER, yytext());
            }
            // fall through
          case 89: break;
          case 24:
            { return  symbol(ParserSym.POT, yytext());
            }
            // fall through
          case 90: break;
          case 25:
            { return  symbol(ParserSym.LLAB, yytext());
            }
            // fall through
          case 91: break;
          case 26:
            { return  symbol(ParserSym.LLCER, yytext());
            }
            // fall through
          case 92: break;
          case 27:
            { string.append( yytext() );
            }
            // fall through
          case 93: break;
          case 28:
            { yybegin(YYINITIAL); 
                                      return symbol(ParserSym.STRINGD, "\""+string.toString()+"\"");
            }
            // fall through
          case 94: break;
          case 29:
            { string.append('\\');
            }
            // fall through
          case 95: break;
          case 30:
            { return  symbol(ParserSym.DESIG, yytext());
            }
            // fall through
          case 96: break;
          case 31:
            { return  symbol(ParserSym.AND, yytext());
            }
            // fall through
          case 97: break;
          case 32:
            { return symbol (ParserSym.INCR, yytext());
            }
            // fall through
          case 98: break;
          case 33:
            { return symbol (ParserSym.DECR, yytext());
            }
            // fall through
          case 99: break;
          case 34:
            { return  symbol(ParserSym.COMENTS, yytext());
            }
            // fall through
          case 100: break;
          case 35:
            { return  symbol(ParserSym.MENORI, yytext());
            }
            // fall through
          case 101: break;
          case 36:
            { return  symbol(ParserSym.IGUAL, yytext());
            }
            // fall through
          case 102: break;
          case 37:
            { return  symbol(ParserSym.MAYORI, yytext());
            }
            // fall through
          case 103: break;
          case 38:
            { return  symbol(ParserSym.DO, yytext());
            }
            // fall through
          case 104: break;
          case 39:
            { return  symbol(ParserSym.IF, yytext());
            }
            // fall through
          case 105: break;
          case 40:
            { return  symbol(ParserSym.OR, yytext());
            }
            // fall through
          case 106: break;
          case 41:
            { string.append('\"');
            }
            // fall through
          case 107: break;
          case 42:
            { string.append('\n');
            }
            // fall through
          case 108: break;
          case 43:
            { string.append('\r');
            }
            // fall through
          case 109: break;
          case 44:
            { string.append('\t');
            }
            // fall through
          case 110: break;
          case 45:
            { return  symbol(ParserSym.CHARACD, yytext());
            }
            // fall through
          case 111: break;
          case 46:
            { return  symbol(ParserSym.DECD, yytext());
            }
            // fall through
          case 112: break;
          case 47:
            { return  symbol(ParserSym.FOR, yytext());
            }
            // fall through
          case 113: break;
          case 48:
            { return  symbol(ParserSym.INT, yytext());
            }
            // fall through
          case 114: break;
          case 49:
            { return  symbol(ParserSym.NEW, yytext());
            }
            // fall through
          case 115: break;
          case 50:
            { return  symbol(ParserSym.COMENTM, yytext());
            }
            // fall through
          case 116: break;
          case 51:
            { return  symbol(ParserSym.BOOL, yytext());
            }
            // fall through
          case 117: break;
          case 52:
            { return  symbol(ParserSym.CASE, yytext());
            }
            // fall through
          case 118: break;
          case 53:
            { return  symbol(ParserSym.CHAR, yytext());
            }
            // fall through
          case 119: break;
          case 54:
            { return  symbol(ParserSym.ELSE, yytext());
            }
            // fall through
          case 120: break;
          case 55:
            { return  symbol(ParserSym.MAIN, yytext());
            }
            // fall through
          case 121: break;
          case 56:
            { return  symbol(ParserSym.BOOLEAD, yytext());
            }
            // fall through
          case 122: break;
          case 57:
            { return  symbol(ParserSym.VOID, yytext());
            }
            // fall through
          case 123: break;
          case 58:
            { return  symbol(ParserSym.BRK, yytext());
            }
            // fall through
          case 124: break;
          case 59:
            { return  symbol(ParserSym.WHILE, yytext());
            }
            // fall through
          case 125: break;
          case 60:
            { return  symbol(ParserSym.DOUBLE, yytext());
            }
            // fall through
          case 126: break;
          case 61:
            { return  symbol(ParserSym.RTRN, yytext());
            }
            // fall through
          case 127: break;
          case 62:
            { return  symbol(ParserSym.STRING, yytext());
            }
            // fall through
          case 128: break;
          case 63:
            { return  symbol(ParserSym.SWT, yytext());
            }
            // fall through
          case 129: break;
          case 64:
            { return  symbol(ParserSym.DEF, yytext());
            }
            // fall through
          case 130: break;
          case 65:
            { return  symbol(ParserSym.CONT, yytext());
            }
            // fall through
          case 131: break;
          case 66:
            { return  symbol(ParserSym.WRTE, yytext());
            }
            // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
