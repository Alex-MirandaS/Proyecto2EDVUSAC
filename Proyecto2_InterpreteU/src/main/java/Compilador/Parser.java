
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compilador;

import java_cup.runtime.*;
import java.util.ArrayList;
import Proyecto.Conversor;
import Proyecto.Simbolos;
import Objetos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\005\000\002\004\007\000\002\004\006\000" +
    "\002\004\004\000\002\004\003\000\002\004\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\012\000\002\007\011\000\002\010\013\000" +
    "\002\010\012\000\002\010\006\000\002\011\011\000\002" +
    "\012\007\000\002\012\006\000\002\012\005\000\002\013" +
    "\020\000\002\014\011\000\002\015\013\000\002\016\012" +
    "\000\002\016\011\000\002\016\011\000\002\016\010\000" +
    "\002\017\012\000\002\017\011\000\002\017\011\000\002" +
    "\017\010\000\002\020\005\000\002\020\006\000\002\021" +
    "\004\000\002\021\004\000\002\021\005\000\002\021\004" +
    "\000\002\021\004\000\002\022\007\000\002\023\005\000" +
    "\002\023\003\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\004\000\002\024\005\000\002\024\006" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\034\013\000\002\034\012\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\004\000\002\030\005\000" +
    "\002\030\003\000\002\031\015\000\002\031\013\000\002" +
    "\031\011\000\002\032\006\000\002\032\004\000\002\033" +
    "\005\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\054\003\031\007\015\010\012\046\014\047" +
    "\011\050\006\051\022\052\045\053\033\056\042\057\020" +
    "\060\004\062\005\064\026\065\007\067\016\070\041\071" +
    "\054\077\050\100\046\103\027\001\002\000\004\030\u0101" +
    "\001\002\000\004\032\375\001\002\000\006\036\uffa9\103" +
    "\uffa9\001\002\000\004\032\357\001\002\000\006\017\346" +
    "\030\345\001\002\000\006\036\uffaa\103\uffaa\001\002\000" +
    "\004\103\344\001\002\000\062\002\ufff9\007\015\010\012" +
    "\035\ufff9\046\014\047\011\050\006\051\022\052\045\053" +
    "\033\055\ufff9\056\042\057\020\060\004\062\005\064\026" +
    "\065\007\066\ufff9\067\016\070\041\071\054\077\050\100" +
    "\046\103\027\001\002\000\006\036\uffab\103\uffab\001\002" +
    "\000\004\103\342\001\002\000\004\032\324\001\002\000" +
    "\004\002\323\001\002\000\030\007\015\010\012\013\064" +
    "\030\321\032\065\075\076\076\070\101\063\102\067\103" +
    "\066\104\075\001\002\000\062\002\uffea\007\uffea\010\uffea" +
    "\035\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053" +
    "\uffea\055\uffea\056\uffea\057\uffea\060\uffea\062\uffea\064\uffea" +
    "\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea\077\uffea\100" +
    "\uffea\103\uffea\001\002\000\006\036\uffa8\103\uffa8\001\002" +
    "\000\062\002\ufff3\007\015\010\012\035\ufff3\046\014\047" +
    "\011\050\006\051\022\052\045\053\033\055\ufff3\056\042" +
    "\057\020\060\004\062\005\064\026\065\007\066\ufff3\067" +
    "\016\070\041\071\054\077\050\100\046\103\027\001\002" +
    "\000\062\002\uffe3\007\uffe3\010\uffe3\035\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\055\uffe3\056\uffe3" +
    "\057\uffe3\060\uffe3\062\uffe3\064\uffe3\065\uffe3\066\uffe3\067" +
    "\uffe3\070\uffe3\071\uffe3\077\uffe3\100\uffe3\103\uffe3\001\002" +
    "\000\062\002\uffe9\007\uffe9\010\uffe9\035\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\055\uffe9\056\uffe9" +
    "\057\uffe9\060\uffe9\062\uffe9\064\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\070\uffe9\071\uffe9\077\uffe9\100\uffe9\103\uffe9\001\002" +
    "\000\004\032\274\001\002\000\020\007\136\010\135\017" +
    "\uffc4\027\176\030\uffc4\032\137\036\266\001\002\000\062" +
    "\002\uffe6\007\uffe6\010\uffe6\035\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6\056\uffe6\057\uffe6" +
    "\060\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070" +
    "\uffe6\071\uffe6\077\uffe6\100\uffe6\103\uffe6\001\002\000\004" +
    "\002\uffff\001\002\000\062\002\uffe4\007\uffe4\010\uffe4\035" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\060\uffe4\062\uffe4\064\uffe4\065" +
    "\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\077\uffe4\100\uffe4" +
    "\103\uffe4\001\002\000\004\103\251\001\002\000\062\002" +
    "\uffe2\007\uffe2\010\uffe2\035\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\062\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2" +
    "\071\uffe2\077\uffe2\100\uffe2\103\uffe2\001\002\000\004\030" +
    "\250\001\002\000\062\002\ufffd\007\015\010\012\035\ufffd" +
    "\046\014\047\011\050\006\051\022\052\045\053\033\055" +
    "\ufffd\056\042\057\020\060\004\062\005\064\026\065\007" +
    "\066\ufffd\067\016\070\041\071\054\077\050\100\046\103" +
    "\027\001\002\000\062\002\ufffb\007\015\010\012\035\ufffb" +
    "\046\014\047\011\050\006\051\022\052\045\053\033\055" +
    "\ufffb\056\042\057\020\060\004\062\005\064\026\065\007" +
    "\066\ufffb\067\016\070\041\071\054\077\050\100\046\103" +
    "\027\001\002\000\062\002\ufff1\007\015\010\012\035\ufff1" +
    "\046\014\047\011\050\006\051\022\052\045\053\033\055" +
    "\ufff1\056\042\057\020\060\004\062\005\064\026\065\007" +
    "\066\ufff1\067\016\070\041\071\054\077\050\100\046\103" +
    "\027\001\002\000\004\032\237\001\002\000\004\030\236" +
    "\001\002\000\004\103\162\001\002\000\062\002\ufff7\007" +
    "\015\010\012\035\ufff7\046\014\047\011\050\006\051\022" +
    "\052\045\053\033\055\ufff7\056\042\057\020\060\004\062" +
    "\005\064\026\065\007\066\ufff7\067\016\070\041\071\054" +
    "\077\050\100\046\103\027\001\002\000\006\036\uffa7\103" +
    "\uffa7\001\002\000\062\002\uffe8\007\uffe8\010\uffe8\035\uffe8" +
    "\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\055" +
    "\uffe8\056\uffe8\057\uffe8\060\uffe8\062\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\070\uffe8\071\uffe8\077\uffe8\100\uffe8\103" +
    "\uffe8\001\002\000\062\002\ufff5\007\015\010\012\035\ufff5" +
    "\046\014\047\011\050\006\051\022\052\045\053\033\055" +
    "\ufff5\056\042\057\020\060\004\062\005\064\026\065\007" +
    "\066\ufff5\067\016\070\041\071\054\077\050\100\046\103" +
    "\027\001\002\000\062\002\uffe7\007\uffe7\010\uffe7\035\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\062\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\070\uffe7\071\uffe7\077\uffe7\100\uffe7\103" +
    "\uffe7\001\002\000\062\002\uffe5\007\uffe5\010\uffe5\035\uffe5" +
    "\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\062\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\070\uffe5\071\uffe5\077\uffe5\100\uffe5\103" +
    "\uffe5\001\002\000\004\002\001\001\002\000\062\002\uffef" +
    "\007\015\010\012\035\uffef\046\014\047\011\050\006\051" +
    "\022\052\045\053\033\055\uffef\056\042\057\020\060\004" +
    "\062\005\064\026\065\007\066\uffef\067\016\070\041\071" +
    "\054\077\050\100\046\103\027\001\002\000\004\034\055" +
    "\001\002\000\052\007\015\010\012\046\014\047\011\050" +
    "\006\051\022\052\045\053\033\056\042\057\020\060\004" +
    "\062\005\064\026\065\007\067\016\070\041\071\054\077" +
    "\050\100\046\103\027\001\002\000\004\035\057\001\002" +
    "\000\004\070\060\001\002\000\004\032\061\001\002\000" +
    "\030\007\015\010\012\013\064\032\065\042\072\075\076" +
    "\076\070\101\063\102\067\103\066\104\075\001\002\000" +
    "\024\020\121\021\122\022\117\023\115\024\116\025\123" +
    "\033\155\040\120\041\124\001\002\000\054\011\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\027\uffac\030\uffac\031" +
    "\uffac\033\uffac\035\uffac\037\uffac\040\uffac\041\uffac\043\uffac" +
    "\001\002\000\026\007\015\010\012\013\064\032\065\075" +
    "\076\076\070\101\063\102\067\103\066\104\075\001\002" +
    "\000\026\007\015\010\012\013\064\032\065\075\076\076" +
    "\070\101\063\102\067\103\066\104\075\001\002\000\060" +
    "\007\136\010\135\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\030\uffaf\031\uffaf\032\137\033\uffaf\036\140\037" +
    "\uffaf\040\uffaf\041\uffaf\043\uffaf\001\002\000\054\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\027\uffae\030\uffae" +
    "\031\uffae\033\uffae\035\uffae\037\uffae\040\uffae\041\uffae\043" +
    "\uffae\001\002\000\054\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1\035\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\043\uffb1\001\002\000\050\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\030\uffba\031" +
    "\uffba\033\uffba\037\uffba\040\uffba\041\uffba\043\uffba\001\002" +
    "\000\030\007\015\010\012\013\064\032\065\042\072\075" +
    "\076\076\070\101\063\102\067\103\066\104\075\001\002" +
    "\000\044\011\102\012\105\013\103\014\101\015\104\016" +
    "\100\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\030\uff9d\033\uff9d\040\uff9d\041\uff9d\043\uff9d\001\002\000" +
    "\050\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\030" +
    "\uffb8\031\uffb8\033\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8" +
    "\001\002\000\054\011\uffad\012\uffad\013\uffad\014\uffad\015" +
    "\uffad\016\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\025\uffad\027\uffad\030\uffad\031\uffad\033\uffad\035\uffad\037" +
    "\uffad\040\uffad\041\uffad\043\uffad\001\002\000\054\011\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\033\uffb0\035\uffb0\037\uffb0\040\uffb0\041\uffb0\043" +
    "\uffb0\001\002\000\050\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\030\uffb9\031\uffb9\033\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\043\uffb9\001\002\000\026\007\015\010\012\013" +
    "\064\032\065\075\076\076\070\101\063\102\067\103\066" +
    "\104\075\001\002\000\026\007\015\010\012\013\064\032" +
    "\065\075\076\076\070\101\063\102\067\103\066\104\075" +
    "\001\002\000\026\007\015\010\012\013\064\032\065\075" +
    "\076\076\070\101\063\102\067\103\066\104\075\001\002" +
    "\000\026\007\015\010\012\013\064\032\065\075\076\076" +
    "\070\101\063\102\067\103\066\104\075\001\002\000\026" +
    "\007\015\010\012\013\064\032\065\075\076\076\070\101" +
    "\063\102\067\103\066\104\075\001\002\000\026\007\015" +
    "\010\012\013\064\032\065\075\076\076\070\101\063\102" +
    "\067\103\066\104\075\001\002\000\050\011\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\015\104\016\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\030\uffc0\031\uffc0\033\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\043\uffc0\001\002\000\050\011" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\030\uffbf\031" +
    "\uffbf\033\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\001\002" +
    "\000\050\011\uffc2\012\105\013\uffc2\014\101\015\104\016" +
    "\100\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\030\uffc2\031\uffc2\033\uffc2\037\uffc2\040\uffc2\041\uffc2\043" +
    "\uffc2\001\002\000\050\011\uffc3\012\105\013\uffc3\014\101" +
    "\015\104\016\100\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\030\uffc3\031\uffc3\033\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\043\uffc3\001\002\000\050\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\104\016\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\030\uffc1\031\uffc1\033\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\043\uffc1\001\002\000\050\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\104\016\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\030\uffbe\031\uffbe" +
    "\033\uffbe\037\uffbe\040\uffbe\041\uffbe\043\uffbe\001\002\000" +
    "\030\020\121\021\122\022\117\023\115\024\116\025\123" +
    "\030\uff9f\033\uff9f\040\uff9f\041\uff9f\043\uff9f\001\002\000" +
    "\030\007\015\010\012\013\064\032\065\042\072\075\076" +
    "\076\070\101\063\102\067\103\066\104\075\001\002\000" +
    "\030\007\015\010\012\013\064\032\065\042\072\075\076" +
    "\076\070\101\063\102\067\103\066\104\075\001\002\000" +
    "\030\007\015\010\012\013\064\032\065\042\072\075\076" +
    "\076\070\101\063\102\067\103\066\104\075\001\002\000" +
    "\030\007\015\010\012\013\064\032\065\042\072\075\076" +
    "\076\070\101\063\102\067\103\066\104\075\001\002\000" +
    "\030\007\015\010\012\013\064\032\065\042\072\075\076" +
    "\076\070\101\063\102\067\103\066\104\075\001\002\000" +
    "\030\007\015\010\012\013\064\032\065\042\072\075\076" +
    "\076\070\101\063\102\067\103\066\104\075\001\002\000" +
    "\030\007\015\010\012\013\064\032\065\042\072\075\076" +
    "\076\070\101\063\102\067\103\066\104\075\001\002\000" +
    "\030\007\015\010\012\013\064\032\065\042\072\075\076" +
    "\076\070\101\063\102\067\103\066\104\075\001\002\000" +
    "\030\020\121\021\122\022\117\023\115\024\116\025\123" +
    "\030\uff9e\033\uff9e\040\120\041\uff9e\043\uff9e\001\002\000" +
    "\030\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\030\uffa1\033\uffa1\040\uffa1\041\uffa1\043\uffa1\001\002\000" +
    "\030\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\030\uffa5\033\uffa5\040\uffa5\041\uffa5\043\uffa5\001\002\000" +
    "\030\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\030\uffa6\033\uffa6\040\uffa6\041\uffa6\043\uffa6\001\002\000" +
    "\030\020\121\021\122\022\117\023\115\024\116\025\123" +
    "\030\uffa0\033\uffa0\040\uffa0\041\uffa0\043\uffa0\001\002\000" +
    "\030\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\030\uffa4\033\uffa4\040\uffa4\041\uffa4\043\uffa4\001\002\000" +
    "\030\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2" +
    "\030\uffa2\033\uffa2\040\uffa2\041\uffa2\043\uffa2\001\002\000" +
    "\030\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\030\uffa3\033\uffa3\040\uffa3\041\uffa3\043\uffa3\001\002\000" +
    "\050\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\030" +
    "\uffb4\031\uffb4\033\uffb4\037\uffb4\040\uffb4\041\uffb4\043\uffb4" +
    "\001\002\000\050\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\030\uffb5\031\uffb5\033\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\043\uffb5\001\002\000\020\033\143\075\076\076\070" +
    "\101\063\102\067\103\144\104\075\001\002\000\026\007" +
    "\015\010\012\013\064\032\065\075\076\076\070\101\063" +
    "\102\067\103\066\104\075\001\002\000\020\011\102\012" +
    "\105\013\103\014\101\015\104\016\100\037\142\001\002" +
    "\000\050\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\030\uffbb\031\uffbb\033\uffbb\037\uffbb\040\uffbb\041\uffbb\043" +
    "\uffbb\001\002\000\130\002\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\030\uffcd\031\uffcd" +
    "\033\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\043\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\062\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\071\uffcd\077\uffcd\100\uffcd\103\uffcd" +
    "\001\002\000\010\027\uffaf\033\uffaf\035\uffaf\001\002\000" +
    "\010\027\150\033\uff96\035\uff96\001\002\000\004\033\147" +
    "\001\002\000\130\002\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\030\uffcc\031\uffcc\033" +
    "\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\043\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\070\uffcc\071\uffcc\077\uffcc\100\uffcc\103\uffcc\001" +
    "\002\000\016\075\076\076\070\101\063\102\067\103\144" +
    "\104\075\001\002\000\006\033\uff97\035\uff97\001\002\000" +
    "\020\011\102\012\105\013\103\014\101\015\104\016\100" +
    "\033\153\001\002\000\050\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\030\uffbc\031\uffbc\033\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\043\uffbc\001\002\000\050\011\uffbd\012\105" +
    "\013\uffbd\014\101\015\104\016\100\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\030\uffbd\031\uffbd\033\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\043\uffbd\001\002\000\004\030" +
    "\156\001\002\000\062\002\uffd6\007\uffd6\010\uffd6\035\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\062\uffd6\064\uffd6\065\uffd6" +
    "\066\uffd6\067\uffd6\070\uffd6\071\uffd6\077\uffd6\100\uffd6\103" +
    "\uffd6\001\002\000\012\002\ufff0\035\ufff0\055\ufff0\066\ufff0" +
    "\001\002\000\012\002\ufff6\035\ufff6\055\ufff6\066\ufff6\001" +
    "\002\000\012\002\ufff8\035\ufff8\055\ufff8\066\ufff8\001\002" +
    "\000\014\017\uffc4\027\176\030\uffc4\032\177\036\200\001" +
    "\002\000\006\017\165\030\164\001\002\000\062\002\uffee" +
    "\007\uffee\010\uffee\035\uffee\046\uffee\047\uffee\050\uffee\051" +
    "\uffee\052\uffee\053\uffee\055\uffee\056\uffee\057\uffee\060\uffee" +
    "\062\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071" +
    "\uffee\077\uffee\100\uffee\103\uffee\001\002\000\030\007\015" +
    "\010\012\013\064\032\065\042\072\075\076\076\070\101" +
    "\063\102\067\103\066\104\075\001\002\000\024\020\121" +
    "\021\122\022\117\023\115\024\116\025\123\040\120\041" +
    "\124\043\171\001\002\000\042\011\102\012\105\013\103" +
    "\014\101\015\104\016\100\020\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\030\170\040\uff9d\041\uff9d\043\uff9d" +
    "\001\002\000\062\002\uffed\007\uffed\010\uffed\035\uffed\046" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\062\uffed\064\uffed\065\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\077\uffed\100\uffed\103\uffed" +
    "\001\002\000\026\007\015\010\012\013\064\032\065\075" +
    "\076\076\070\101\063\102\067\103\066\104\075\001\002" +
    "\000\020\011\102\012\105\013\103\014\101\015\104\016" +
    "\100\031\173\001\002\000\026\007\015\010\012\013\064" +
    "\032\065\075\076\076\070\101\063\102\067\103\066\104" +
    "\075\001\002\000\020\011\102\012\105\013\103\014\101" +
    "\015\104\016\100\030\175\001\002\000\062\002\uffb7\007" +
    "\uffb7\010\uffb7\035\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\062" +
    "\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7" +
    "\077\uffb7\100\uffb7\103\uffb7\001\002\000\004\103\234\001" +
    "\002\000\016\033\216\046\014\047\011\050\006\051\022" +
    "\052\045\001\002\000\004\037\201\001\002\000\004\017" +
    "\202\001\002\000\006\034\204\072\203\001\002\000\014" +
    "\046\014\047\011\050\006\051\022\052\045\001\002\000" +
    "\016\075\076\076\070\101\063\102\067\103\144\104\075" +
    "\001\002\000\004\035\206\001\002\000\004\030\207\001" +
    "\002\000\062\002\uff9b\007\uff9b\010\uff9b\035\uff9b\046\uff9b" +
    "\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\055\uff9b\056" +
    "\uff9b\057\uff9b\060\uff9b\062\uff9b\064\uff9b\065\uff9b\066\uff9b" +
    "\067\uff9b\070\uff9b\071\uff9b\077\uff9b\100\uff9b\103\uff9b\001" +
    "\002\000\004\036\211\001\002\000\026\007\015\010\012" +
    "\013\064\032\065\075\076\076\070\101\063\102\067\103" +
    "\066\104\075\001\002\000\020\011\102\012\105\013\103" +
    "\014\101\015\104\016\100\037\213\001\002\000\004\030" +
    "\214\001\002\000\062\002\uff9c\007\uff9c\010\uff9c\035\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\055" +
    "\uff9c\056\uff9c\057\uff9c\060\uff9c\062\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\067\uff9c\070\uff9c\071\uff9c\077\uff9c\100\uff9c\103" +
    "\uff9c\001\002\000\004\103\231\001\002\000\004\034\225" +
    "\001\002\000\004\033\220\001\002\000\004\034\221\001" +
    "\002\000\054\007\015\010\012\035\222\046\014\047\011" +
    "\050\006\051\022\052\045\053\033\056\042\057\020\060" +
    "\004\062\005\064\026\065\007\067\016\070\041\071\054" +
    "\077\050\100\046\103\027\001\002\000\062\002\uffd0\007" +
    "\uffd0\010\uffd0\035\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\062" +
    "\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0" +
    "\077\uffd0\100\uffd0\103\uffd0\001\002\000\004\035\224\001" +
    "\002\000\062\002\uffd1\007\uffd1\010\uffd1\035\uffd1\046\uffd1" +
    "\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\062\uffd1\064\uffd1\065\uffd1\066\uffd1" +
    "\067\uffd1\070\uffd1\071\uffd1\077\uffd1\100\uffd1\103\uffd1\001" +
    "\002\000\054\007\015\010\012\035\226\046\014\047\011" +
    "\050\006\051\022\052\045\053\033\056\042\057\020\060" +
    "\004\062\005\064\026\065\007\067\016\070\041\071\054" +
    "\077\050\100\046\103\027\001\002\000\062\002\uffce\007" +
    "\uffce\010\uffce\035\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\055\uffce\056\uffce\057\uffce\060\uffce\062" +
    "\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\071\uffce" +
    "\077\uffce\100\uffce\103\uffce\001\002\000\004\035\230\001" +
    "\002\000\062\002\uffcf\007\uffcf\010\uffcf\035\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\062\uffcf\064\uffcf\065\uffcf\066\uffcf" +
    "\067\uffcf\070\uffcf\071\uffcf\077\uffcf\100\uffcf\103\uffcf\001" +
    "\002\000\006\027\232\033\uff98\001\002\000\014\046\014" +
    "\047\011\050\006\051\022\052\045\001\002\000\004\033" +
    "\uff99\001\002\000\010\017\uffc4\027\176\030\uffc4\001\002" +
    "\000\006\017\uffc5\030\uffc5\001\002\000\062\002\uffc8\007" +
    "\uffc8\010\uffc8\035\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\062" +
    "\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8" +
    "\077\uffc8\100\uffc8\103\uffc8\001\002\000\030\007\015\010" +
    "\012\013\064\032\065\042\072\075\076\076\070\101\063" +
    "\102\067\103\066\104\075\001\002\000\024\020\121\021" +
    "\122\022\117\023\115\024\116\025\123\033\241\040\120" +
    "\041\124\001\002\000\004\034\242\001\002\000\052\007" +
    "\015\010\012\046\014\047\011\050\006\051\022\052\045" +
    "\053\033\056\042\057\020\060\004\062\005\064\026\065" +
    "\007\067\016\070\041\071\054\077\050\100\046\103\027" +
    "\001\002\000\004\035\244\001\002\000\062\002\uffd7\007" +
    "\uffd7\010\uffd7\035\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\062" +
    "\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7" +
    "\077\uffd7\100\uffd7\103\uffd7\001\002\000\012\002\ufff2\035" +
    "\ufff2\055\ufff2\066\ufff2\001\002\000\012\002\ufffc\035\ufffc" +
    "\055\ufffc\066\ufffc\001\002\000\012\002\ufffe\035\ufffe\055" +
    "\ufffe\066\ufffe\001\002\000\062\002\uffcb\007\uffcb\010\uffcb" +
    "\035\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\062\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\077\uffcb\100" +
    "\uffcb\103\uffcb\001\002\000\004\032\252\001\002\000\016" +
    "\033\253\046\014\047\011\050\006\051\022\052\045\001" +
    "\002\000\004\034\262\001\002\000\004\033\255\001\002" +
    "\000\004\034\256\001\002\000\054\007\015\010\012\035" +
    "\257\046\014\047\011\050\006\051\022\052\045\053\033" +
    "\056\042\057\020\060\004\062\005\064\026\065\007\067" +
    "\016\070\041\071\054\077\050\100\046\103\027\001\002" +
    "\000\062\002\uffd4\007\uffd4\010\uffd4\035\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\062\uffd4\064\uffd4\065\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\071\uffd4\077\uffd4\100\uffd4\103\uffd4\001\002" +
    "\000\004\035\261\001\002\000\062\002\uffd5\007\uffd5\010" +
    "\uffd5\035\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\062\uffd5\064" +
    "\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\077\uffd5" +
    "\100\uffd5\103\uffd5\001\002\000\054\007\015\010\012\035" +
    "\263\046\014\047\011\050\006\051\022\052\045\053\033" +
    "\056\042\057\020\060\004\062\005\064\026\065\007\067" +
    "\016\070\041\071\054\077\050\100\046\103\027\001\002" +
    "\000\062\002\uffd2\007\uffd2\010\uffd2\035\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\062\uffd2\064\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\070\uffd2\071\uffd2\077\uffd2\100\uffd2\103\uffd2\001\002" +
    "\000\004\035\265\001\002\000\062\002\uffd3\007\uffd3\010" +
    "\uffd3\035\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\053\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\062\uffd3\064" +
    "\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\077\uffd3" +
    "\100\uffd3\103\uffd3\001\002\000\026\007\015\010\012\013" +
    "\064\032\065\075\076\076\070\101\063\102\067\103\066" +
    "\104\075\001\002\000\020\011\102\012\105\013\103\014" +
    "\101\015\104\016\100\037\270\001\002\000\004\017\271" +
    "\001\002\000\026\007\015\010\012\013\064\032\065\075" +
    "\076\076\070\101\063\102\067\103\066\104\075\001\002" +
    "\000\020\011\102\012\105\013\103\014\101\015\104\016" +
    "\100\030\273\001\002\000\062\002\uff9a\007\uff9a\010\uff9a" +
    "\035\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\062\uff9a\064\uff9a" +
    "\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\077\uff9a\100" +
    "\uff9a\103\uff9a\001\002\000\030\007\015\010\012\013\064" +
    "\032\065\042\072\075\076\076\070\101\063\102\067\103" +
    "\066\104\075\001\002\000\024\020\121\021\122\022\117" +
    "\023\115\024\116\025\123\033\276\040\120\041\124\001" +
    "\002\000\004\034\277\001\002\000\052\007\015\010\012" +
    "\046\014\047\011\050\006\051\022\052\045\053\033\056" +
    "\042\057\020\060\004\062\005\064\026\065\007\067\016" +
    "\070\041\071\054\077\050\100\046\103\027\001\002\000" +
    "\004\035\301\001\002\000\064\002\uffe0\007\uffe0\010\uffe0" +
    "\035\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\062\uffe0\063\302" +
    "\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\077" +
    "\uffe0\100\uffe0\103\uffe0\001\002\000\006\034\304\064\305" +
    "\001\002\000\062\002\uffe1\007\uffe1\010\uffe1\035\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\062\uffe1\064\uffe1\065\uffe1\066" +
    "\uffe1\067\uffe1\070\uffe1\071\uffe1\077\uffe1\100\uffe1\103\uffe1" +
    "\001\002\000\052\007\015\010\012\046\014\047\011\050" +
    "\006\051\022\052\045\053\033\056\042\057\020\060\004" +
    "\062\005\064\026\065\007\067\016\070\041\071\054\077" +
    "\050\100\046\103\027\001\002\000\004\032\306\001\002" +
    "\000\030\007\015\010\012\013\064\032\065\042\072\075" +
    "\076\076\070\101\063\102\067\103\066\104\075\001\002" +
    "\000\024\020\121\021\122\022\117\023\115\024\116\025" +
    "\123\033\310\040\120\041\124\001\002\000\004\034\311" +
    "\001\002\000\052\007\015\010\012\046\014\047\011\050" +
    "\006\051\022\052\045\053\033\056\042\057\020\060\004" +
    "\062\005\064\026\065\007\067\016\070\041\071\054\077" +
    "\050\100\046\103\027\001\002\000\004\035\313\001\002" +
    "\000\064\002\uffde\007\uffde\010\uffde\035\uffde\046\uffde\047" +
    "\uffde\050\uffde\051\uffde\052\uffde\053\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\062\uffde\063\302\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\070\uffde\071\uffde\077\uffde\100\uffde\103\uffde" +
    "\001\002\000\062\002\uffdf\007\uffdf\010\uffdf\035\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\062\uffdf\064\uffdf\065\uffdf\066" +
    "\uffdf\067\uffdf\070\uffdf\071\uffdf\077\uffdf\100\uffdf\103\uffdf" +
    "\001\002\000\004\035\316\001\002\000\062\002\uffdd\007" +
    "\uffdd\010\uffdd\035\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\062" +
    "\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd" +
    "\077\uffdd\100\uffdd\103\uffdd\001\002\000\012\002\ufff4\035" +
    "\ufff4\055\ufff4\066\ufff4\001\002\000\020\011\102\012\105" +
    "\013\103\014\101\015\104\016\100\030\322\001\002\000" +
    "\062\002\uffca\007\uffca\010\uffca\035\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\uffca\055\uffca\056\uffca\057" +
    "\uffca\060\uffca\062\uffca\064\uffca\065\uffca\066\uffca\067\uffca" +
    "\070\uffca\071\uffca\077\uffca\100\uffca\103\uffca\001\002\000" +
    "\062\002\uffc9\007\uffc9\010\uffc9\035\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\062\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9" +
    "\070\uffc9\071\uffc9\077\uffc9\100\uffc9\103\uffc9\001\002\000" +
    "\004\002\000\001\002\000\004\046\325\001\002\000\004" +
    "\103\326\001\002\000\004\017\327\001\002\000\026\007" +
    "\015\010\012\013\064\032\065\075\076\076\070\101\063" +
    "\102\067\103\066\104\075\001\002\000\020\011\102\012" +
    "\105\013\103\014\101\015\104\016\100\030\331\001\002" +
    "\000\030\007\015\010\012\013\064\032\065\042\072\075" +
    "\076\076\070\101\063\102\067\103\066\104\075\001\002" +
    "\000\024\020\121\021\122\022\117\023\115\024\116\025" +
    "\123\030\333\040\120\041\124\001\002\000\010\007\015" +
    "\010\012\103\334\001\002\000\006\007\136\010\135\001" +
    "\002\000\004\033\336\001\002\000\004\034\337\001\002" +
    "\000\052\007\015\010\012\046\014\047\011\050\006\051" +
    "\022\052\045\053\033\056\042\057\020\060\004\062\005" +
    "\064\026\065\007\067\016\070\041\071\054\077\050\100" +
    "\046\103\027\001\002\000\004\035\341\001\002\000\062" +
    "\002\uffd8\007\uffd8\010\uffd8\035\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\062\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070" +
    "\uffd8\071\uffd8\077\uffd8\100\uffd8\103\uffd8\001\002\000\050" +
    "\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\030\uffb3" +
    "\031\uffb3\033\uffb3\037\uffb3\040\uffb3\041\uffb3\043\uffb3\001" +
    "\002\000\012\002\ufffa\035\ufffa\055\ufffa\066\ufffa\001\002" +
    "\000\050\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\030\uffb2\031\uffb2\033\uffb2\037\uffb2\040\uffb2\041\uffb2\043" +
    "\uffb2\001\002\000\062\002\uffeb\007\uffeb\010\uffeb\035\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\062\uffeb\064\uffeb\065\uffeb" +
    "\066\uffeb\067\uffeb\070\uffeb\071\uffeb\077\uffeb\100\uffeb\103" +
    "\uffeb\001\002\000\030\007\015\010\012\013\064\032\065" +
    "\042\072\075\076\076\070\101\063\102\067\103\066\104" +
    "\075\001\002\000\024\020\121\021\122\022\117\023\115" +
    "\024\116\025\123\040\120\041\124\043\352\001\002\000" +
    "\042\011\102\012\105\013\103\014\101\015\104\016\100" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\030" +
    "\351\040\uff9d\041\uff9d\043\uff9d\001\002\000\062\002\uffec" +
    "\007\uffec\010\uffec\035\uffec\046\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\055\uffec\056\uffec\057\uffec\060\uffec" +
    "\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071" +
    "\uffec\077\uffec\100\uffec\103\uffec\001\002\000\026\007\015" +
    "\010\012\013\064\032\065\075\076\076\070\101\063\102" +
    "\067\103\066\104\075\001\002\000\020\011\102\012\105" +
    "\013\103\014\101\015\104\016\100\031\354\001\002\000" +
    "\026\007\015\010\012\013\064\032\065\075\076\076\070" +
    "\101\063\102\067\103\066\104\075\001\002\000\020\011" +
    "\102\012\105\013\103\014\101\015\104\016\100\030\356" +
    "\001\002\000\062\002\uffb6\007\uffb6\010\uffb6\035\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\060\uffb6\062\uffb6\064\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\070\uffb6\071\uffb6\077\uffb6\100\uffb6\103\uffb6" +
    "\001\002\000\026\007\015\010\012\013\064\032\065\075" +
    "\076\076\070\101\063\102\067\103\066\104\075\001\002" +
    "\000\020\011\102\012\105\013\103\014\101\015\104\016" +
    "\100\033\361\001\002\000\004\034\362\001\002\000\006" +
    "\055\364\066\365\001\002\000\004\035\374\001\002\000" +
    "\004\031\372\001\002\000\026\007\015\010\012\013\064" +
    "\032\065\075\076\076\070\101\063\102\067\103\066\104" +
    "\075\001\002\000\020\011\102\012\105\013\103\014\101" +
    "\015\104\016\100\031\367\001\002\000\052\007\015\010" +
    "\012\046\014\047\011\050\006\051\022\052\045\053\033" +
    "\056\042\057\020\060\004\062\005\064\026\065\007\067" +
    "\016\070\041\071\054\077\050\100\046\103\027\001\002" +
    "\000\010\035\uffda\055\364\066\365\001\002\000\004\035" +
    "\uffdb\001\002\000\052\007\015\010\012\046\014\047\011" +
    "\050\006\051\022\052\045\053\033\056\042\057\020\060" +
    "\004\062\005\064\026\065\007\067\016\070\041\071\054" +
    "\077\050\100\046\103\027\001\002\000\004\035\uffd9\001" +
    "\002\000\062\002\uffdc\007\uffdc\010\uffdc\035\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\070\uffdc\071\uffdc\077\uffdc\100\uffdc\103\uffdc\001" +
    "\002\000\026\007\015\010\012\013\064\032\065\075\076" +
    "\076\070\101\063\102\067\103\066\104\075\001\002\000" +
    "\020\011\102\012\105\013\103\014\101\015\104\016\100" +
    "\033\377\001\002\000\004\030\u0100\001\002\000\062\002" +
    "\uffc6\007\uffc6\010\uffc6\035\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\062\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6" +
    "\071\uffc6\077\uffc6\100\uffc6\103\uffc6\001\002\000\062\002" +
    "\uffc7\007\uffc7\010\uffc7\035\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\062\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7" +
    "\071\uffc7\077\uffc7\100\uffc7\103\uffc7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\052\002\016\003\051\004\036\005\035\006" +
    "\022\007\027\011\050\013\031\014\023\015\033\016\012" +
    "\017\043\020\046\021\052\022\037\023\007\025\034\027" +
    "\042\031\020\034\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\003\342" +
    "\004\036\005\035\006\022\007\027\011\050\013\031\014" +
    "\023\015\033\016\012\017\043\020\046\021\052\022\037" +
    "\023\007\025\034\027\042\031\020\034\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\076\024\317\025\070\026\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\003\316" +
    "\004\036\005\035\006\022\007\027\011\050\013\031\014" +
    "\023\015\033\016\012\017\043\020\046\021\052\022\037" +
    "\023\007\025\034\027\042\031\020\034\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\003\246\004\036\005\035\006\022\007\027\011" +
    "\050\013\031\014\023\015\033\016\012\017\043\020\046" +
    "\021\052\022\037\023\007\025\034\027\042\031\020\034" +
    "\024\001\001\000\050\003\245\004\036\005\035\006\022" +
    "\007\027\011\050\013\031\014\023\015\033\016\012\017" +
    "\043\020\046\021\052\022\037\023\007\025\034\027\042" +
    "\031\020\034\024\001\001\000\050\003\244\004\036\005" +
    "\035\006\022\007\027\011\050\013\031\014\023\015\033" +
    "\016\012\017\043\020\046\021\052\022\037\023\007\025" +
    "\034\027\042\031\020\034\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\162\001\001\000\050\003" +
    "\160\004\036\005\035\006\022\007\027\011\050\013\031" +
    "\014\023\015\033\016\012\017\043\020\046\021\052\022" +
    "\037\023\007\025\034\027\042\031\020\034\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\157\004" +
    "\036\005\035\006\022\007\027\011\050\013\031\014\023" +
    "\015\033\016\012\017\043\020\046\021\052\022\037\023" +
    "\007\025\034\027\042\031\020\034\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\003" +
    "\156\004\036\005\035\006\022\007\027\011\050\013\031" +
    "\014\023\015\033\016\012\017\043\020\046\021\052\022" +
    "\037\023\007\025\034\027\042\031\020\034\024\001\001" +
    "\000\002\001\001\000\050\003\055\004\036\005\035\006" +
    "\022\007\027\011\050\013\031\014\023\015\033\016\012" +
    "\017\043\020\046\021\052\022\037\023\007\025\034\027" +
    "\042\031\020\034\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\076\024\072\025" +
    "\070\026\073\030\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\076\024\153\025\070\026\073\001" +
    "\001\000\012\020\076\024\151\025\070\026\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\076\024\072\025\070\026\073" +
    "\030\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\076\024\112\025\070\026\073\001\001\000\012\020" +
    "\076\024\111\025\070\026\073\001\001\000\012\020\076" +
    "\024\110\025\070\026\073\001\001\000\012\020\076\024" +
    "\107\025\070\026\073\001\001\000\012\020\076\024\106" +
    "\025\070\026\073\001\001\000\012\020\076\024\105\025" +
    "\070\026\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\076\024\072" +
    "\025\070\026\073\030\133\001\001\000\014\020\076\024" +
    "\072\025\070\026\073\030\132\001\001\000\014\020\076" +
    "\024\072\025\070\026\073\030\131\001\001\000\014\020" +
    "\076\024\072\025\070\026\073\030\130\001\001\000\014" +
    "\020\076\024\072\025\070\026\073\030\127\001\001\000" +
    "\014\020\076\024\072\025\070\026\073\030\126\001\001" +
    "\000\014\020\076\024\072\025\070\026\073\030\125\001" +
    "\001\000\014\020\076\024\072\025\070\026\073\030\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\144\033\145\001\001\000\012" +
    "\020\076\024\140\025\070\026\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\144\033\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\076\024\166\025\070\026\073" +
    "\030\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\076\024\171\025\070\026\073" +
    "\001\001\000\002\001\001\000\012\020\076\024\173\025" +
    "\070\026\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\234\001\001\000\006\027\214\032\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\207\001\001\000\006\026\144\033\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\076\024\211\025\070\026" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\003\222\004\036\005\035" +
    "\006\022\007\027\011\050\013\031\014\023\015\033\016" +
    "\012\017\043\020\046\021\052\022\037\023\007\025\034" +
    "\027\042\031\020\034\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\003\226\004\036" +
    "\005\035\006\022\007\027\011\050\013\031\014\023\015" +
    "\033\016\012\017\043\020\046\021\052\022\037\023\007" +
    "\025\034\027\042\031\020\034\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\214\032\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\076\024\072\025\070\026\073\030\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\003\242\004\036" +
    "\005\035\006\022\007\027\011\050\013\031\014\023\015" +
    "\033\016\012\017\043\020\046\021\052\022\037\023\007" +
    "\025\034\027\042\031\020\034\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\214\032\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\003\257\004\036\005" +
    "\035\006\022\007\027\011\050\013\031\014\023\015\033" +
    "\016\012\017\043\020\046\021\052\022\037\023\007\025" +
    "\034\027\042\031\020\034\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\263\004" +
    "\036\005\035\006\022\007\027\011\050\013\031\014\023" +
    "\015\033\016\012\017\043\020\046\021\052\022\037\023" +
    "\007\025\034\027\042\031\020\034\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\076\024\266\025\070\026\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\076\024\271\025\070\026" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\076\024\072\025\070\026\073\030\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\003\277\004\036" +
    "\005\035\006\022\007\027\011\050\013\031\014\023\015" +
    "\033\016\012\017\043\020\046\021\052\022\037\023\007" +
    "\025\034\027\042\031\020\034\024\001\001\000\002\001" +
    "\001\000\004\010\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\314\004\036\005\035\006\022\007" +
    "\027\011\050\013\031\014\023\015\033\016\012\017\043" +
    "\020\046\021\052\022\037\023\007\025\034\027\042\031" +
    "\020\034\024\001\001\000\002\001\001\000\014\020\076" +
    "\024\072\025\070\026\073\030\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\003\311\004\036\005\035" +
    "\006\022\007\027\011\050\013\031\014\023\015\033\016" +
    "\012\017\043\020\046\021\052\022\037\023\007\025\034" +
    "\027\042\031\020\034\024\001\001\000\002\001\001\000" +
    "\004\010\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\076\024\327\025\070\026\073\001\001\000\002\001\001" +
    "\000\014\020\076\024\072\025\070\026\073\030\331\001" +
    "\001\000\002\001\001\000\004\025\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\003" +
    "\337\004\036\005\035\006\022\007\027\011\050\013\031" +
    "\014\023\015\033\016\012\017\043\020\046\021\052\022" +
    "\037\023\007\025\034\027\042\031\020\034\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\076\024\347\025\070\026\073\030\346\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\076\024\352\025\070\026\073\001\001\000\002\001" +
    "\001\000\012\020\076\024\354\025\070\026\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\076\024" +
    "\357\025\070\026\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\362\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\076\024\365\025\070\026\073" +
    "\001\001\000\002\001\001\000\050\003\367\004\036\005" +
    "\035\006\022\007\027\011\050\013\031\014\023\015\033" +
    "\016\012\017\043\020\046\021\052\022\037\023\007\025" +
    "\034\027\042\031\020\034\024\001\001\000\004\012\370" +
    "\001\001\000\002\001\001\000\050\003\372\004\036\005" +
    "\035\006\022\007\027\011\050\013\031\014\023\015\033" +
    "\016\012\017\043\020\046\021\052\022\037\023\007\025" +
    "\034\027\042\031\020\034\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\076\024\375\025\070\026" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= todo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // todo ::= comen todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // todo ::= comen 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // todo ::= asign todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // todo ::= asign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // todo ::= met todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // todo ::= met 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // todo ::= fun todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // todo ::= fun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // todo ::= llaMet todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // todo ::= llaMet 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // todo ::= sent todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // todo ::= sent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // todo ::= impr todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // todo ::= impr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // todo ::= extra todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // todo ::= extra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asign ::= tida idList PYCOMA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Asignacion(conversor.asignS((String)ids,(String)td,"none"));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asign",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asign ::= tida idList ASIG expr PYCOMA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Asignacion(conversor.asignM((String)ids, (String)td,(String)ex,(String)ids+"="+(String)ex));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asign",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asign ::= idList ASIG expr PYCOMA 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Asignacion(conversor.asignM((String)ids, "N/I",(String)ex,(String)ids+"="+(String)ex));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asign",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asign ::= idList PYCOMA 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Asignacion(conversor.asignM((String)ids, "N/I",(String)ex,(String)ids+"="+(String)ex));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asign",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asign ::= arre 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asign",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asign ::= ter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asign",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comen ::= COMENTS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Hoja((String)d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comen",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comen ::= COMENTM 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Hoja((String)d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comen",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sent ::= iff 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sent ::= swit 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = -s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sent ::= forr 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sent ::= whil 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sent ::= dowhil 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iff ::= IF PARAB con PARCER LLAB todo LLCER elseif 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		((ArrayList <Instruccion>)t).addAll((ArrayList <Instruccion>)el); RESULT = new If("if "+(String)c+":", (ArrayList <Instruccion>)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iff",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // iff ::= IF PARAB con PARCER LLAB todo LLCER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new If("if "+(String)c+":", ((ArrayList <Instruccion>)t));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iff",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elseif ::= ELSE IF PARAB con PARCER LLAB todo LLCER elseif 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		((ArrayList<Instruccion>)el).add(new Else("elif "+(String)c+":", (ArrayList <Instruccion>)t)); RESULT = el;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elseif ::= ELSE IF PARAB con PARCER LLAB todo LLCER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		ArrayList<Instruccion> temp = new ArrayList<>(); temp.add(new Else("elif "+(String)c+":", (ArrayList <Instruccion>)t)); RESULT = temp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // elseif ::= ELSE LLAB todo LLCER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		ArrayList<Instruccion> temp = new ArrayList<>(); temp.add(new Else("else:", (ArrayList <Instruccion>)t)); RESULT = temp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // swit ::= SWT PARAB expr PARCER LLAB cas LLCER 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Switch("def switch(case,"+(String)ex+"):\n \t switcher = {",(ArrayList <Instruccion>)c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("swit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cas ::= CASE expr DOSPUNTOS todo cas 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		((ArrayList<Instruccion>)c).add(new Case((String)ex+":", (ArrayList <Instruccion>)t)); RESULT = c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cas",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cas ::= CASE expr DOSPUNTOS todo 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<Instruccion> temp = new ArrayList<>(); temp.add(new Case((String)ex+":", (ArrayList <Instruccion>)t)); RESULT = temp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cas",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cas ::= DEF DOSPUNTOS todo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<Instruccion> temp = new ArrayList<>(); temp.add(new Case("default:", (ArrayList <Instruccion>)t)); RESULT = temp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cas",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // forr ::= FOR PARAB INT ID ASIG expr PYCOMA con PYCOMA crecd PARCER LLAB todo LLCER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For("for "+(String)id+" in range("+(String)ex+","+(String)c+"):", (ArrayList <Instruccion>)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // whil ::= WHILE PARAB con PARCER LLAB todo LLCER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new While("while "+(String)c+" :",(ArrayList<Instruccion>)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whil",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dowhil ::= DO LLAB todo LLCER WHILE PARAB con PARCER PYCOMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DoWhile("while TRUE:-if("+(String)c+"):\n \t break", (ArrayList<Instruccion>)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhil",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // met ::= VOID ID PARAB param PARCER LLAB todo LLCER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Metodo("def "+(String)id+"("+(String)p+"):",(ArrayList <Instruccion>)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("met",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // met ::= VOID ID PARAB param PARCER LLAB LLCER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new Metodo("def "+(String)id+"("+(String)p+"):",null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("met",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // met ::= VOID ID PARAB PARCER LLAB todo LLCER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Metodo("def "+(String)id+"():", (ArrayList <Instruccion>)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("met",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // met ::= VOID ID PARAB PARCER LLAB LLCER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		RESULT = new Metodo("def "+(String)id+"():", null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("met",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // fun ::= tida ID PARAB param PARCER LLAB todo LLCER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Funcion("def "+(String)id+"("+(String)p+"):",(ArrayList <Instruccion>)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fun",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // fun ::= tida ID PARAB param PARCER LLAB LLCER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new Funcion("def "+(String)id+"("+(String)p+"):",null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fun",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // fun ::= tida ID PARAB PARCER LLAB todo LLCER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Funcion("def "+(String)id+"():",(ArrayList <Instruccion>)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fun",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // fun ::= tida ID PARAB PARCER LLAB LLCER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		RESULT = new Funcion("def "+(String)id+"():",null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fun",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // llaMet ::= ID PARAB PARCER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new LlMetodo((String)id+"()");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llaMet",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // llaMet ::= ID PARAB paramList PARCER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new LlMetodo((String)id+"("+(String)p+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llaMet",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // extra ::= crecd PYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extra",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // extra ::= RTRN PYCOMA 
            {
              Object RESULT =null;
		RESULT = new BCR("return");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extra",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // extra ::= RTRN expr PYCOMA 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new BCR("return"+(String)ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extra",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // extra ::= BRK PYCOMA 
            {
              Object RESULT =null;
		RESULT = new BCR("break");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extra",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // extra ::= CONT PYCOMA 
            {
              Object RESULT =null;
		RESULT = new BCR("continue");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extra",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // impr ::= WRTE PARAB expr PARCER PYCOMA 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 conversor.agregarHTML((String)ex); RESULT = new Write((String)ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // idList ::= ID COMA idList 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (String) id+","+(String)s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // idList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (String) id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr MAS expr 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr MEN expr 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr MULT expr 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr DIV expr 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr POT expr 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr MOD expr 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= MEN expr 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= PARAB expr PARCER 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= ID CORAB expr CORCER 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= crecd 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= llaMet 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= datList 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ter ::= tida idList ASIG con TER expr DOSPUNTOS expr PYCOMA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		RESULT = new Asignacion(conversor.asignM((String)ids, (String)td,(String)ex,(String)ids+"="+(String)ex));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ter",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ter ::= idList ASIG con TER expr DOSPUNTOS expr PYCOMA 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		RESULT = new Asignacion(conversor.asignM((String)ids, "N/I",(String)ex,(String)ids+"="+(String)ex));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ter",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // crecd ::= ID INCR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crecd",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // crecd ::= ID DECR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crecd",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // crecd ::= INCR ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crecd",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // crecd ::= DECR ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crecd",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // datList ::= ENTD 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // datList ::= DECD 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // datList ::= ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // datList ::= BOOLEAD 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // datList ::= STRINGD 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // datList ::= CHARACD 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tida ::= INT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "int";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tida",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tida ::= DOUBLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "double";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tida",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tida ::= CHAR 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "char";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tida",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tida ::= BOOL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "bool";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tida",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tida ::= STRING 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "string";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tida",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // con ::= con IGUAL con 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // con ::= con DESIG con 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // con ::= con MENORQ con 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // con ::= con MENORI con 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // con ::= con MAYORQ con 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // con ::= con MAYORI con 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // con ::= con AND con 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // con ::= NOT con 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // con ::= con OR con 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // con ::= expr 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // arre ::= tida ID CORAB CORCER ASIG NEW tida CORAB expr CORCER PYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arre",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // arre ::= tida ID CORAB CORCER ASIG LLAB paramList LLCER PYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arre",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // arre ::= ID CORAB expr CORCER ASIG expr PYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arre",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // param ::= tida ID COMA param 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (String)id+","+(String)p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // param ::= tida ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (String)id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // paramList ::= datList COMA paramList 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // paramList ::= datList 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
